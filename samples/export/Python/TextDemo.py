#!/usr/bin/python3
# -*- coding: utf-8 -*-
# TextDemo 
# generated by Structorizer 3.30-11 

# Copyright (C) 2019-10-10 Kay GÃ¼rtzig 
# License: GPLv3-link 
# GNU General Public License (V 3) 
# https://www.gnu.org/licenses/gpl.html 
# http://www.gnu.de/documents/gpl.de.html 

from enum import Enum
import math
import turtle
turtle.colormode(255)
turtle.mode("logo")

# Draws a blank for font height h, ignoring the colorNo 
def blank(h, colorNo) :
    width = h/2.0
    turtle.penup()
    turtle.right(90)
    colea443083 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.left(90)
    turtle.pencolor(colea443083)

def forward(len, color) :
    if ((color) == 1) :
        col441de4f7 = turtle.pencolor(); turtle.pencolor("#000000")
        turtle.forward(len)
        turtle.pencolor(col441de4f7)
    elif ((color) == 2) :
        cole4994963 = turtle.pencolor(); turtle.pencolor("#ff8080")
        turtle.forward(len)
        turtle.pencolor(cole4994963)
    elif ((color) == 3) :
        col4e5788bf = turtle.pencolor(); turtle.pencolor("#ffff80")
        turtle.forward(len)
        turtle.pencolor(col4e5788bf)
    elif ((color) == 4) :
        col2dadee82 = turtle.pencolor(); turtle.pencolor("#80ff80")
        turtle.forward(len)
        turtle.pencolor(col2dadee82)
    elif ((color) == 5) :
        colbf4f348 = turtle.pencolor(); turtle.pencolor("#80ffff")
        turtle.forward(len)
        turtle.pencolor(colbf4f348)
    elif ((color) == 6) :
        col7be14b29 = turtle.pencolor(); turtle.pencolor("#0080ff")
        turtle.forward(len)
        turtle.pencolor(col7be14b29)
    elif ((color) == 7) :
        col42920c0d = turtle.pencolor(); turtle.pencolor("#ff80c0")
        turtle.forward(len)
        turtle.pencolor(col42920c0d)
    elif ((color) == 8) :
        col57651878 = turtle.pencolor(); turtle.pencolor("#c0c0c0")
        turtle.forward(len)
        turtle.pencolor(col57651878)
    elif ((color) == 9) :
        col8f86237d = turtle.pencolor(); turtle.pencolor("#ff8000")
        turtle.forward(len)
        turtle.pencolor(col8f86237d)
    elif ((color) == 10) :
        col269d17f0 = turtle.pencolor(); turtle.pencolor("#8080ff")
        turtle.forward(len)
        turtle.pencolor(col269d17f0)

# Draws letter A in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterA(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(h*h + width*width/4.0)
    rotAngle = math.degrees(math.atan(width/2.0/h))
    turtle.right(rotAngle)
    turtle.forward(hypo/2.0, colorNo)
    turtle.right(90 - rotAngle)
    turtle.forward(width/2.0, colorNo)
    turtle.penup()
    cola8472957 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(width/2.0)
    turtle.pendown()
    turtle.pencolor(cola8472957)
    turtle.left(90 - rotAngle)
    turtle.forward(hypo/2.0, colorNo)
    turtle.left(2*rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)

# Draws letter E in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterE(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.right(90)
    turtle.penup()
    cola6ff3f72 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(cola6ff3f72)
    turtle.forward(width, colorNo)
    turtle.left(90)
    turtle.penup()
    colef28b938 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(colef28b938)
    turtle.forward(width, colorNo)
    turtle.left(90)

# Draws letter F in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterF(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.right(90)
    turtle.penup()
    colc75fa057 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(colc75fa057)
    turtle.forward(width, colorNo)
    turtle.left(90)
    turtle.penup()
    colaefc42ae = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.forward(width)
    turtle.pendown()
    turtle.pencolor(colaefc42ae)
    turtle.left(90)

# Draws letter H in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterH(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.penup()
    turtle.right(90)
    col10943a54 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col10943a54)
    turtle.forward(h/2.0, colorNo)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.penup()
    col1ed0ed03 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(width)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col1ed0ed03)
    turtle.forward(h/2.0, colorNo)
    turtle.left(180)

# Draws letter I in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterI(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    turtle.right(90)
    col19d91ba3 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col19d91ba3)
    turtle.forward(b, colorNo)
    turtle.penup()
    col58110f52 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col58110f52)
    turtle.forward(h, colorNo)
    turtle.penup()
    turtle.right(90)
    col5bdc7bd0 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b/2.0)
    turtle.pendown()
    turtle.pencolor(col5bdc7bd0)
    turtle.forward(b, colorNo)
    turtle.penup()
    col556f683d = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b/2 + c)
    turtle.left(90)
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col556f683d)

# Draws letter K in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterK(h, colorNo) :
    width = h/2.0
    diag = h/math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.penup()
    turtle.right(90)
    col9b814ab6 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.right(135)
    turtle.pendown()
    turtle.pencolor(col9b814ab6)
    turtle.forward(diag, colorNo)
    turtle.left(90)
    turtle.forward(diag, colorNo)
    turtle.left(135)

# Draws letter L in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterL(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.penup()
    col1933dba1 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col1933dba1)
    turtle.forward(width, colorNo)
    turtle.left(90)

# Draws letter M in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterM(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)/2.0
    rotAngle = math.degrees(math.atan(width/h))
    turtle.forward(h, colorNo)
    turtle.left(rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.left(rotAngle)
    turtle.forward(-h, colorNo)

# Draws letter N in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterN(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)
    rotAngle = math.degrees(math.atan(width/h))
    turtle.forward(h, colorNo)
    turtle.left(rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)
    turtle.forward(h, colorNo)
    turtle.penup()
    col6a404dbd = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col6a404dbd)

# Draws letter T in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterT(h, colorNo) :
    width = h/2.0
    turtle.penup()
    colf25eaa66 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(colf25eaa66)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.penup()
    colba45e72e = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(width/2.0)
    turtle.pendown()
    turtle.pencolor(colba45e72e)
    turtle.right(90)
    turtle.forward(h, colorNo)
    turtle.left(90)
    turtle.penup()
    col97e725ee = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width/2.0)
    turtle.pendown()
    turtle.pencolor(col97e725ee)
    turtle.left(90)

# Draws letter V in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterV(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(h*h + width*width/4.0)
    rotAngle = math.degrees(math.atan(width/2.0/h))
    turtle.penup()
    colae2b5543 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.left(rotAngle)
    turtle.pendown()
    turtle.pencolor(colae2b5543)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(rotAngle)
    colc793efda = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(colc793efda)

# Draws letter W in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterW(h, colorNo) :
    width = h/2.0
    width_3 = width/3.0
    hypo = math.sqrt(width_3*width_3 + h*h)
    rotAngle = math.degrees(math.atan(width_3/h))
    turtle.penup()
    colc68fe4a1 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.left(rotAngle)
    turtle.pendown()
    turtle.pencolor(colc68fe4a1)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(90+rotAngle)
    col8378ec96 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width_3)
    turtle.right(90-rotAngle)
    turtle.pendown()
    turtle.pencolor(col8378ec96)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(rotAngle)
    col261cb936 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col261cb936)

# Draws letter X in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterX(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)
    rotAngle = math.degrees(math.atan(width/h))
    turtle.right(rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(90+rotAngle)
    col94418aa7 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.right(90-rotAngle)
    turtle.pendown()
    turtle.pencolor(col94418aa7)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)

# Draws letter Y in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterY(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)/2.0
    rotAngle = math.degrees(math.atan(width/h))
    turtle.penup()
    col4690a2db = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.left(rotAngle)
    turtle.pendown()
    turtle.pencolor(col4690a2db)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)
    turtle.penup()
    col4921be7d = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h/2.0)
    turtle.pendown()
    turtle.pencolor(col4921be7d)
    turtle.forward(h/2.0, colorNo)
    turtle.right(rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.left(rotAngle)
    turtle.penup()
    colf15def3b = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(colf15def3b)

# Draws letter Z in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterZ(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)
    rotAngle = math.degrees(math.atan(width/h))
    turtle.penup()
    col7f4c800b = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col7f4c800b)
    turtle.forward(width, colorNo)
    turtle.left(90-rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(90-rotAngle)
    turtle.forward(width, colorNo)
    turtle.left(90)

# Draws nEdges edges of a regular n-polygon with edge length a 
# counter-clockwise, if ctrclkws is true, or clockwise if ctrclkws is false. 
def polygonPart(a, n, ctrclkws, nEdges, color) :
    rotAngle = 360.0/n
    if (ctrclkws):
        rotAngle = -rotAngle

    for k in range(1, nEdges+1, 1):
        turtle.right(rotAngle)
        turtle.forward(a, color)

# Draws a dummy character (small centered square) with font height h and 
# the colour encoded by colorNo 
def charDummy(h, colorNo) :
    width = h / 2.0
    # Octagon edge length (here: edge lengzh of the square) 
    b = width / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = (width - b) / 2.0
    d = b / math.sqrt(2.0)
    turtle.penup()
    col9358a6cc = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0-b/2.0)
    turtle.right(90)
    turtle.forward(c)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col9358a6cc)
    # Draws the square with edge length b 
    polygonPart(b, 4, true, 4, colorNo)
    turtle.penup()
    turtle.left(90)
    col7dd3e94e = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + c)
    turtle.left(90)
    turtle.backward(h/2.0-b/2.0)
    turtle.pendown()
    turtle.pencolor(col7dd3e94e)

# Draws a comma in colour specified by colorNo with font height h 
# from the current turtle position. 
def comma(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    rotAngle = math.degrees(math.atan(0.5))
    hypo = c * math.sqrt(1.25)
    turtle.penup()
    turtle.right(90)
    coled42ac3c = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c+b)/2.0 + c)
    turtle.pendown()
    turtle.pencolor(coled42ac3c)
    # Counterclockwise draw 3 edges of a square with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, true, 3, colorNo)
    turtle.left(90)
    turtle.forward(c/2.0, colorNo)
    turtle.right(90)
    turtle.forward(c, colorNo)
    turtle.left(180 - rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.right(90 - rotAngle)
    col60fa54e7 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col60fa54e7)

# Draws an exclamation mark in the colour encoded by colorNo with font height h 
# from the current turtle position. 
def exclMk(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    width = h/2.0
    length1 = h - (b+c)/2.0
    length2 = length1 - 2*c
    hypo = math.sqrt(width*width/16.0 + length2*length2)
    # 360Â°/8 
    rotAngle = 45
    rotAngle2 = math.degrees(math.atan(width/4.0/length2))
    turtle.penup()
    col277fb2f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(length1)
    turtle.right(90)
    turtle.forward(width/2.0)
    turtle.left(90 + rotAngle)
    turtle.pendown()
    turtle.pencolor(col277fb2f)
    # Clockwise draw 5 edges of an octagon with edge length b/2 
    # in the colour endcoded by colorNo 
    polygonPart(b/2.0, 8, false, 5, colorNo)
    turtle.right(rotAngle2)
    turtle.forward(hypo, colorNo)
    turtle.left(2*rotAngle2)
    turtle.forward(-hypo, colorNo)
    turtle.penup()
    colac3f37b9 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(hypo)
    turtle.right(rotAngle2)
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(c/2.0)
    turtle.pendown()
    turtle.pencolor(colac3f37b9)
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, false, 4, colorNo)
    turtle.penup()
    col144537d5 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.backward(c)
    turtle.pendown()
    turtle.pencolor(col144537d5)

# Draws a full stop in colour specified by colorNo with font height h 
# from the current turtle position. 
def fullSt(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    turtle.right(90)
    col5521e38b = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c+b)/2.0 + c)
    turtle.pendown()
    turtle.pencolor(col5521e38b)
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, true, 4, colorNo)
    turtle.penup()
    col9e9b272b = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col9e9b272b)

# Draws letter B in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterB(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    turtle.left(180)
    colf695a8c5 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + c)
    turtle.pendown()
    turtle.pencolor(colf695a8c5)
    # Clockwise draw 4 edges of an octagon with edge length b 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    turtle.left(180)
    col933f44d5 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(col933f44d5)
    turtle.left(90)

# Draws letter C in the colour encoded by colorNo with font height h 
# from the current turtle position. 
def letterC(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer trinagle at the octagon corner 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    colcb1458e4 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(colcb1458e4)
    turtle.right(180)
    # Clockwise draws 3 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    turtle.left(rotAngle)
    turtle.penup()
    col502b28fc = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(2*b + 2*c)
    turtle.pendown()
    turtle.pencolor(col502b28fc)
    # Counterclockwise draws 4 edges of an octagon with edge length b 
    # iin the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    col4d4c5075 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.pencolor(col4d4c5075)
    turtle.forward(b + 2*c, colorNo)
    turtle.pendown()
    turtle.left(90)

# Draws letter D in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterD(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, false, 2, colorNo)
    turtle.forward(b + 2*c, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, false, 2, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    turtle.left(180)
    colca1dd8c1 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(colca1dd8c1)
    turtle.left(90)

# Draws letter G in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterG(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon. 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col22562f2f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col22562f2f)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.left(90)
    turtle.forward(b/2.0 + c, colorNo)
    turtle.penup()
    col2e508ae2 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b/2.0 + c)
    turtle.right(90)
    turtle.forward(b + c)
    turtle.pendown()
    turtle.pencolor(col2e508ae2)
    # Counterclockwise draw 4 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    cole45c8c7a = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.pencolor(cole45c8c7a)
    turtle.forward(b + 2*c, colorNo)
    turtle.pendown()
    turtle.left(90)

# Draws letter J in colour encoded by colorNo with font height h 
# from the current turtle position. 
def letterJ(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col7c2c742 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col7c2c742)
    turtle.right(180)
    # Counterclockwise draw 3 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    turtle.left(rotAngle)
    turtle.forward(h - c, colorNo)
    turtle.penup()
    col4f3cfc8f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col4f3cfc8f)

# Draws letter O in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterO(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col8dff39df = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col8dff39df)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    col16d1dfc9 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(col16d1dfc9)
    turtle.left(90)

# Draws letter P in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterP(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    col79d359da = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b + 2*c)
    turtle.left(90)
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(col79d359da)
    turtle.left(180)

# Draws letter Q in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterQ(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col70b446fb = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col70b446fb)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    coldb108cb = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(b + 2*c)
    turtle.pencolor(coldb108cb)
    turtle.right(rotAngle)
    col39c1975d = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b)
    turtle.pendown()
    turtle.pencolor(col39c1975d)
    turtle.forward(b, colorNo)
    turtle.left(90 + rotAngle)

# Zeichnet den Buchstaben R von der Turtleposition aus 
# mit ZeilenhÃ¶he h 
def letterR(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.left(90 + rotAngle)
    turtle.forward(math.sqrt(2.0)*(b + 2*c), colorNo)
    turtle.left(90 + rotAngle)

# Draws letter S in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterS(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Side length of the (outer) corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    colcf910630 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(colcf910630)
    turtle.right(180)
    # Counterclockwise draw 6 edges of an octagon with edge length b 
    # in the colour encoded by colorNo 
    polygonPart(b, 8, true, 6, colorNo)
    # Clockwise draw 5 edges of an octagon with edge length b 
    # in the colour encoded by colorNo 
    polygonPart(b, 8, false, 5, colorNo)
    turtle.right(rotAngle)
    turtle.penup()
    colf913f8de = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(2*b + 3*c)
    turtle.pendown()
    turtle.pencolor(colf913f8de)
    turtle.left(180)

# Draws letter U in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterU(h, colorNo) :
    # edge length of a regular octagon 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col687e7c5e = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col687e7c5e)
    turtle.forward(h - c, colorNo)
    turtle.penup()
    col33bb68be = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h-c)
    turtle.pendown()
    turtle.pencolor(col33bb68be)
    turtle.right(180)
    # Counterclockwise draw 3 edges of an octagoin with edge length b in colour specified by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    turtle.left(rotAngle)
    turtle.forward(h - c, colorNo)
    turtle.penup()
    col80586121 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col80586121)

# Draws a question mark in colour specified by colorNo with font height h 
# from the current turtle position. 
def qstnMk(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    coldf6db274 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h-c)
    turtle.pendown()
    turtle.pencolor(coldf6db274)
    # Counterclockwise draw 5 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 5, colorNo)
    turtle.forward(c, colorNo)
    turtle.left(rotAngle)
    turtle.forward(b/2.0, colorNo)
    turtle.penup()
    col56bd418d = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(c/2.0)
    turtle.pendown()
    turtle.pencolor(col56bd418d)
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, false, 4, colorNo)
    turtle.penup()
    cole122edc3 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.backward(c)
    turtle.pendown()
    turtle.pencolor(cole122edc3)

# Has the turtle draw the given string 'textÂ´ with font height 'hÂ´ (in 
# pixels) and the colour coded by integer 'cÂ´ from the current Turtle 
# position to the Turtle canvas. If the turtle looks North then 
# the text will be written rightwards. In the event, the turtle will be 
# placed behind the text in original orientation (such that the next text 
# would be written like a continuation. Colour codes: 
# 1 = black 
# 2 = red 
# 3 = yellow 
# 4 = green 
# 5 = cyan 
# 6 = blue 
# 7 = pink 
# 8 = grey 
# 9 = orange 
# 10 = violet 
# All letters (ASCII) will be converted to uppercase, digits cannot 
# be represented, the set of representable special characters is: 
# '.', ',', '!', '?'. Other characters will be shown as a small 
# centred square (dummy character). 
def drawText(text, h, c) :
    gap = h/10.0
    for k in range(1, length(text)+1, 1):
        letter = uppercase(copy(text, k, 1))
        if (letter == ","):
            comma(h,c)
        else:
            # "," cannot be chacked against because the comma is misinterpreted 
            # as selector list separator. 
            if ((letter) == "A") :
                letterA(h,c)
            elif ((letter) == "B") :
                letterB(h,c)
            elif ((letter) == "C") :
                letterC(h,c)
            elif ((letter) == "D") :
                letterD(h,c)
            elif ((letter) == "E") :
                letterE(h,c)
            elif ((letter) == "F") :
                letterF(h,c)
            elif ((letter) == "G") :
                letterG(h,c)
            elif ((letter) == "H") :
                letterH(h,c)
            elif ((letter) == "I") :
                letterI(h,c)
            elif ((letter) == "J") :
                letterJ(h,c)
            elif ((letter) == "K") :
                letterK(h,c)
            elif ((letter) == "L") :
                letterL(h,c)
            elif ((letter) == "M") :
                letterM(h,c)
            elif ((letter) == "N") :
                letterN(h,c)
            elif ((letter) == "O") :
                letterO(h,c)
            elif ((letter) == "P") :
                letterP(h,c)
            elif ((letter) == "Q") :
                letterQ(h,c)
            elif ((letter) == "R") :
                letterR(h,c)
            elif ((letter) == "S") :
                letterS(h,c)
            elif ((letter) == "T") :
                letterT(h,c)
            elif ((letter) == "U") :
                letterU(h,c)
            elif ((letter) == "V") :
                letterV(h,c)
            elif ((letter) == "W") :
                letterW(h,c)
            elif ((letter) == "X") :
                letterX(h,c)
            elif ((letter) == "Y") :
                letterY(h,c)
            elif ((letter) == "Z") :
                letterZ(h,c)
            elif ((letter) == " ") :
                blank(h,c)
            elif ((letter) == "!") :
                exclMk(h,c)
            elif ((letter) == "?") :
                qstnMk(h,c)
            elif ((letter) == ".") :
                fullSt(h,c)
            else:
                charDummy(h,c)

        turtle.right(90)
        turtle.penup()
        colb6f61568 = turtle.pencolor(); turtle.pencolor("#000000")
        turtle.forward(gap)
        turtle.pendown()
        turtle.left(90)
        turtle.pencolor(colb6f61568)

# Demo program for routine drawText() 
# Asks the user to enter a text, a wanted text height and colour, 
# and then draws this string onto the turtle screen. Places every 
# entered text to a new line. 
print("This is a demo program for text writing with Turleizer.", sep='')
turtle.showturtle()
turtle.pendown()
y = 0
while True:
    text = input("Enter some text (empty string to exit)")
    # Make sure the content is interpreted as string 
    text = "" + text
    if (text != ""):
        while True:
            height = input("Height of the text (pixels)")
            if height >= 5:
                break

        while True:
            colour = input("Colour (1=black, 2=red, 3=yellow, 4=green, 5=cyan, 6=blue, 7=pink, 8=gray, 9=orange, 10=violet)")
            if colour >= 1  and  colour <= 10:
                break

        y = y + height + 2
        turtle.goto(0, y - 2)
        drawText(text, height, colour)

    if text == "":
        break

turtle.goto(0, y + 15)
drawText("Thank you, bye.", 10, 4)
turtle.hideturtle()

# turtle.bye()	# TODO: re-enable this if you want to close the turtle window. 

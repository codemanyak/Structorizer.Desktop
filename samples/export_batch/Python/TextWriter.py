#!/usr/bin/python3
# -*- coding: utf-8 -*-
# TextDemo 
# generated by Structorizer 3.31-04 

# Copyright (C) 2019-10-10 Kay GÃ¼rtzig 
# License: GPLv3-link 
# GNU General Public License (V 3) 
# https://www.gnu.org/licenses/gpl.html 
# http://www.gnu.de/documents/gpl.de.html 

from enum import Enum
import math
import turtle
turtle.colormode(255)
turtle.mode("logo")

def backward(len, color) :
    if ((color) == 1) :
        colea1aa6af = turtle.pencolor(); turtle.pencolor("#000000")
        turtle.backward(len)
        turtle.pencolor(colea1aa6af)
    elif ((color) == 2) :
        col2da6f86e = turtle.pencolor(); turtle.pencolor("#ff8080")
        turtle.backward(len)
        turtle.pencolor(col2da6f86e)
    elif ((color) == 3) :
        colb7ed110e = turtle.pencolor(); turtle.pencolor("#ffff80")
        turtle.backward(len)
        turtle.pencolor(colb7ed110e)
    elif ((color) == 4) :
        colecdee65d = turtle.pencolor(); turtle.pencolor("#80ff80")
        turtle.backward(len)
        turtle.pencolor(colecdee65d)
    elif ((color) == 5) :
        colcf50ab61 = turtle.pencolor(); turtle.pencolor("#80ffff")
        turtle.backward(len)
        turtle.pencolor(colcf50ab61)
    elif ((color) == 6) :
        colacd4095f = turtle.pencolor(); turtle.pencolor("#0080ff")
        turtle.backward(len)
        turtle.pencolor(colacd4095f)
    elif ((color) == 7) :
        col426f3997 = turtle.pencolor(); turtle.pencolor("#ff80c0")
        turtle.backward(len)
        turtle.pencolor(col426f3997)
    elif ((color) == 8) :
        col69a4d0cf = turtle.pencolor(); turtle.pencolor("#c0c0c0")
        turtle.backward(len)
        turtle.pencolor(col69a4d0cf)
    elif ((color) == 9) :
        col42043d17 = turtle.pencolor(); turtle.pencolor("#ff8000")
        turtle.backward(len)
        turtle.pencolor(col42043d17)
    elif ((color) == 10) :
        col6c6b44e0 = turtle.pencolor(); turtle.pencolor("#8080ff")
        turtle.backward(len)
        turtle.pencolor(col6c6b44e0)

# Draws a blank for font height h, ignoring the colorNo 
def blank(h, colorNo) :
    width = h/2.0
    turtle.penup()
    turtle.right(90)
    col3e207596 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.left(90)
    turtle.pencolor(col3e207596)

def forward(len, color) :
    if ((color) == 1) :
        colf1c71e03 = turtle.pencolor(); turtle.pencolor("#000000")
        turtle.forward(len)
        turtle.pencolor(colf1c71e03)
    elif ((color) == 2) :
        col3e411a38 = turtle.pencolor(); turtle.pencolor("#ff8080")
        turtle.forward(len)
        turtle.pencolor(col3e411a38)
    elif ((color) == 3) :
        colfadac9cc = turtle.pencolor(); turtle.pencolor("#ffff80")
        turtle.forward(len)
        turtle.pencolor(colfadac9cc)
    elif ((color) == 4) :
        colb77598f = turtle.pencolor(); turtle.pencolor("#80ff80")
        turtle.forward(len)
        turtle.pencolor(colb77598f)
    elif ((color) == 5) :
        colae355208 = turtle.pencolor(); turtle.pencolor("#80ffff")
        turtle.forward(len)
        turtle.pencolor(colae355208)
    elif ((color) == 6) :
        col27c3e43e = turtle.pencolor(); turtle.pencolor("#0080ff")
        turtle.forward(len)
        turtle.pencolor(col27c3e43e)
    elif ((color) == 7) :
        col290ec9b6 = turtle.pencolor(); turtle.pencolor("#ff80c0")
        turtle.forward(len)
        turtle.pencolor(col290ec9b6)
    elif ((color) == 8) :
        col8c76cf07 = turtle.pencolor(); turtle.pencolor("#c0c0c0")
        turtle.forward(len)
        turtle.pencolor(col8c76cf07)
    elif ((color) == 9) :
        col72d3cadc = turtle.pencolor(); turtle.pencolor("#ff8000")
        turtle.forward(len)
        turtle.pencolor(col72d3cadc)
    elif ((color) == 10) :
        colb278e0af = turtle.pencolor(); turtle.pencolor("#8080ff")
        turtle.forward(len)
        turtle.pencolor(colb278e0af)

# Draws digit 1 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit1(h, colorNo) :
    turtle.penup()
    col141e58b6 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.pendown()
    turtle.pencolor(col141e58b6)
    turtle.right(45)
    turtle.forward(h/math.sqrt(2), colorNo)
    turtle.left(45)
    turtle.backward(h, colorNo)

# Draws digit 4 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit4(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    # inner angle at top of the triangle 
    angle = math.degrees(math.atan(1 - 2.0*c/h))
    turtle.right(90)
    turtle.penup()
    coldc5630b1 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c + b)
    turtle.pendown()
    turtle.pencolor(coldc5630b1)
    turtle.left(90)
    turtle.forward(h, colorNo)
    turtle.left(180 - angle)
    turtle.forward(math.sqrt(h*h/4.0 + sqr(h/2.0 - c)), colorNo)
    turtle.left(90 + angle)
    turtle.forward(h/2.0, colorNo)
    turtle.penup()
    turtle.left(90)
    colc54ec254 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h/2.0)
    turtle.pendown()
    turtle.pencolor(colc54ec254)

# Draws digit 7 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit7(h, colorNo) :
    angle = 90 + math.degrees(math.atan(0.5))
    turtle.penup()
    col94573525 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(col94573525)
    turtle.right(90)
    turtle.forward(h/2.0, colorNo)
    turtle.right(angle)
    turtle.forward(h * math.sqrt(1.25), colorNo)
    turtle.left(angle)
    turtle.penup()
    cole2a6631c = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(cole2a6631c)

# Draws letter A in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterA(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(h*h + width*width/4.0)
    rotAngle = math.degrees(math.atan(width/2.0/h))
    turtle.right(rotAngle)
    turtle.forward(hypo/2.0, colorNo)
    turtle.right(90 - rotAngle)
    turtle.forward(width/2.0, colorNo)
    turtle.penup()
    colcc7b086a = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(width/2.0)
    turtle.pendown()
    turtle.pencolor(colcc7b086a)
    turtle.left(90 - rotAngle)
    turtle.forward(hypo/2.0, colorNo)
    turtle.left(2*rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)

# Draws letter E in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterE(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.right(90)
    turtle.penup()
    col3eea36b9 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col3eea36b9)
    turtle.forward(width, colorNo)
    turtle.left(90)
    turtle.penup()
    col9fd7f15f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col9fd7f15f)
    turtle.forward(width, colorNo)
    turtle.left(90)

# Draws letter F in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterF(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.right(90)
    turtle.penup()
    colc908fc7d = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(colc908fc7d)
    turtle.forward(width, colorNo)
    turtle.left(90)
    turtle.penup()
    col61c6d21 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.forward(width)
    turtle.pendown()
    turtle.pencolor(col61c6d21)
    turtle.left(90)

# Draws letter H in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterH(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.penup()
    turtle.right(90)
    col3a626b61 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col3a626b61)
    turtle.forward(h/2.0, colorNo)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.penup()
    colb6e2bd39 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(width)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(colb6e2bd39)
    turtle.forward(h/2.0, colorNo)
    turtle.left(180)

# Draws letter I in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterI(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    turtle.right(90)
    col5aadc49c = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col5aadc49c)
    turtle.forward(b, colorNo)
    turtle.penup()
    col2d6562fa = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col2d6562fa)
    turtle.forward(h, colorNo)
    turtle.penup()
    turtle.right(90)
    col5fdd20a3 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b/2.0)
    turtle.pendown()
    turtle.pencolor(col5fdd20a3)
    turtle.forward(b, colorNo)
    turtle.penup()
    col6d93ace9 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b/2 + c)
    turtle.left(90)
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col6d93ace9)

# Draws letter K in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterK(h, colorNo) :
    width = h/2.0
    diag = h/math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.penup()
    turtle.right(90)
    col884810ea = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.right(135)
    turtle.pendown()
    turtle.pencolor(col884810ea)
    turtle.forward(diag, colorNo)
    turtle.left(90)
    turtle.forward(diag, colorNo)
    turtle.left(135)

# Draws letter L in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterL(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.penup()
    colad789cc3 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(colad789cc3)
    turtle.forward(width, colorNo)
    turtle.left(90)

# Draws letter M in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterM(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)/2.0
    rotAngle = math.degrees(math.atan(width/h))
    turtle.forward(h, colorNo)
    turtle.left(rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.left(rotAngle)
    turtle.forward(-h, colorNo)

# Draws letter N in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterN(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)
    rotAngle = math.degrees(math.atan(width/h))
    turtle.forward(h, colorNo)
    turtle.left(rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)
    turtle.forward(h, colorNo)
    turtle.penup()
    cola56c3600 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(cola56c3600)

# Draws letter T in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterT(h, colorNo) :
    width = h/2.0
    turtle.penup()
    colec349017 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(colec349017)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.penup()
    cola2d9f1ec = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(width/2.0)
    turtle.pendown()
    turtle.pencolor(cola2d9f1ec)
    turtle.right(90)
    turtle.forward(h, colorNo)
    turtle.left(90)
    turtle.penup()
    col4556413c = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width/2.0)
    turtle.pendown()
    turtle.pencolor(col4556413c)
    turtle.left(90)

# Draws letter V in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterV(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(h*h + width*width/4.0)
    rotAngle = math.degrees(math.atan(width/2.0/h))
    turtle.penup()
    col6cc3a596 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.left(rotAngle)
    turtle.pendown()
    turtle.pencolor(col6cc3a596)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(rotAngle)
    cola1db46f6 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(cola1db46f6)

# Draws letter W in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterW(h, colorNo) :
    width = h/2.0
    width_3 = width/3.0
    hypo = math.sqrt(width_3*width_3 + h*h)
    rotAngle = math.degrees(math.atan(width_3/h))
    turtle.penup()
    col922b0853 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.left(rotAngle)
    turtle.pendown()
    turtle.pencolor(col922b0853)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(90+rotAngle)
    col12e4c934 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width_3)
    turtle.right(90-rotAngle)
    turtle.pendown()
    turtle.pencolor(col12e4c934)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(rotAngle)
    colaa97edbc = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(colaa97edbc)

# Draws letter X in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterX(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)
    rotAngle = math.degrees(math.atan(width/h))
    turtle.right(rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(90+rotAngle)
    col4f4b21fb = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.right(90-rotAngle)
    turtle.pendown()
    turtle.pencolor(col4f4b21fb)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)

# Draws letter Y in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterY(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)/2.0
    rotAngle = math.degrees(math.atan(width/h))
    turtle.penup()
    colf6c766ab = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.left(rotAngle)
    turtle.pendown()
    turtle.pencolor(colf6c766ab)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)
    turtle.penup()
    col7e0fbf12 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h/2.0)
    turtle.pendown()
    turtle.pencolor(col7e0fbf12)
    turtle.forward(h/2.0, colorNo)
    turtle.right(rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.left(rotAngle)
    turtle.penup()
    colf7ba4eec = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(colf7ba4eec)

# Draws letter Z in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterZ(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)
    rotAngle = math.degrees(math.atan(width/h))
    turtle.penup()
    coled732efc = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(coled732efc)
    turtle.forward(width, colorNo)
    turtle.left(90-rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(90-rotAngle)
    turtle.forward(width, colorNo)
    turtle.left(90)

# Draws nEdges edges of a regular n-polygon with edge length a 
# counter-clockwise, if ctrclkws is true, or clockwise if ctrclkws is false. 
def polygonPart(a, n, ctrclkws, nEdges, color) :
    rotAngle = 360.0/n
    if (ctrclkws):
        rotAngle = -rotAngle

    for k in range(1, nEdges+1, 1):
        turtle.right(rotAngle)
        turtle.forward(a, color)

# Draws a dummy character (small centered square) with font height h and 
# the colour encoded by colorNo 
def charDummy(h, colorNo) :
    width = h / 2.0
    # Octagon edge length (here: edge lengzh of the square) 
    b = width / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = (width - b) / 2.0
    d = b / math.sqrt(2.0)
    turtle.penup()
    colf449b5b1 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0-b/2.0)
    turtle.right(90)
    turtle.forward(c)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(colf449b5b1)
    # Draws the square with edge length b 
    polygonPart(b, 4, true, 4, colorNo)
    turtle.penup()
    turtle.left(90)
    col8f828bc8 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + c)
    turtle.left(90)
    turtle.backward(h/2.0-b/2.0)
    turtle.pendown()
    turtle.pencolor(col8f828bc8)

# Draws a comma in colour specified by colorNo with font height h 
# from the current turtle position. 
def comma(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    rotAngle = math.degrees(math.atan(0.5))
    hypo = c * math.sqrt(1.25)
    turtle.penup()
    turtle.right(90)
    col4d34f63c = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c+b)/2.0 + c)
    turtle.pendown()
    turtle.pencolor(col4d34f63c)
    # Counterclockwise draw 3 edges of a square with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, true, 3, colorNo)
    turtle.left(90)
    turtle.forward(c/2.0, colorNo)
    turtle.right(90)
    turtle.forward(c, colorNo)
    turtle.left(180 - rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.right(90 - rotAngle)
    col2693fbfa = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col2693fbfa)

# Draws digit 2 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit2(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    angle = math.degrees(math.atan(h/(h + 2*c)))
    turtle.penup()
    colfafeb11a = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h - c)
    turtle.pendown()
    turtle.pencolor(colfafeb11a)
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.right(angle)
    turtle.forward(h/2.0 * math.sqrt(1 + sqr(1+2*c/h)), colorNo)
    turtle.left(90 + angle)
    turtle.forward(h/2.0, colorNo)
    turtle.left(90)

# Draws digit 3 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit3(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    colc7b0c329 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(colc7b0c329)
    turtle.right(180)
    # Counterclockwise draw 6 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 6, colorNo)
    turtle.penup()
    turtle.left(180)
    col87a68a4 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b)
    turtle.pendown()
    turtle.pencolor(col87a68a4)
    # Counterclockwise draw 5 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 5, colorNo)
    turtle.penup()
    turtle.left(45)
    col9bb190c5 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h-c)
    turtle.left(90)
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col9bb190c5)

# Draws digit 5 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit5(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col1122098a = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col1122098a)
    turtle.right(180)
    # Counterclockwise draw 6 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 6, colorNo)
    turtle.forward(c, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(h/2.0, 4, false, 2, colorNo)
    turtle.penup()
    turtle.left(90)
    col69781d65 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col69781d65)

# Draws digit 6 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit6(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col38a6af4f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col38a6af4f)
    turtle.right(180)
    # Counterclockwise draw all 8 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 8, colorNo)
    turtle.penup()
    turtle.left(180)
    col1719b73f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b)
    turtle.pendown()
    turtle.pencolor(col1719b73f)
    turtle.forward(2 * c + b, colorNo)
    # Clockwise draw 3 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 3, colorNo)
    turtle.penup()
    turtle.left(135)
    col4f4c69d7 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h-c)
    turtle.pendown()
    turtle.pencolor(col4f4c69d7)

# Draws digit 8 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit8(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col8365fdac = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col8365fdac)
    turtle.right(180)
    # Counterclockwise draw all 8 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 8, colorNo)
    turtle.penup()
    turtle.left(180)
    colf6dd5230 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b)
    turtle.right(45)
    turtle.forward(b)
    turtle.left(135)
    turtle.pendown()
    turtle.pencolor(colf6dd5230)
    # Clockwise draw 7 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 7, colorNo)
    turtle.penup()
    turtle.left(45)
    colfa588f26 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.forward(c)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(colfa588f26)

# Draws digit 9 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit9(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    cole636510f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(cole636510f)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(2 * c + b, colorNo)
    # Counterclockwise draw 7 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 7, colorNo)
    turtle.penup()
    turtle.left(45)
    colf902d62e = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h/2.0 + c)
    turtle.pendown()
    turtle.pencolor(colf902d62e)

# Draws an exclamation mark in the colour encoded by colorNo with font height h 
# from the current turtle position. 
def exclMk(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    width = h/2.0
    length1 = h - (b+c)/2.0
    length2 = length1 - 2*c
    hypo = math.sqrt(width*width/16.0 + length2*length2)
    # 360Â°/8 
    rotAngle = 45
    rotAngle2 = math.degrees(math.atan(width/4.0/length2))
    turtle.penup()
    col5ab0291a = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(length1)
    turtle.right(90)
    turtle.forward(width/2.0)
    turtle.left(90 + rotAngle)
    turtle.pendown()
    turtle.pencolor(col5ab0291a)
    # Clockwise draw 5 edges of an octagon with edge length b/2 
    # in the colour endcoded by colorNo 
    polygonPart(b/2.0, 8, false, 5, colorNo)
    turtle.right(rotAngle2)
    turtle.forward(hypo, colorNo)
    turtle.left(2*rotAngle2)
    turtle.forward(-hypo, colorNo)
    turtle.penup()
    col24c5c537 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(hypo)
    turtle.right(rotAngle2)
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(c/2.0)
    turtle.pendown()
    turtle.pencolor(col24c5c537)
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, false, 4, colorNo)
    turtle.penup()
    col8d05fac2 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.backward(c)
    turtle.pendown()
    turtle.pencolor(col8d05fac2)

# Draws a full stop in colour specified by colorNo with font height h 
# from the current turtle position. 
def fullSt(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    turtle.right(90)
    col53b56ffa = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c+b)/2.0 + c)
    turtle.pendown()
    turtle.pencolor(col53b56ffa)
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, true, 4, colorNo)
    turtle.penup()
    col28990749 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col28990749)

# Draws letter Ã in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterAe(h, colorNo) :
    turtle.penup()
    colcab76ad0 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(colcab76ad0)
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16.0,1), 4, false, 4, colorNo)
    turtle.right(90)
    turtle.penup()
    col7444746f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.pendown()
    turtle.pencolor(col7444746f)
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16.0,1), 4, false, 4, colorNo)
    turtle.right(90)
    turtle.penup()
    col6796ce11 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.right(90)
    turtle.forward(h/2.0)
    turtle.pendown()
    turtle.pencolor(col6796ce11)
    turtle.right(90)
    letterA(h, colorNo)

# Draws letter B in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterB(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    turtle.left(180)
    colba9dbbb8 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + c)
    turtle.pendown()
    turtle.pencolor(colba9dbbb8)
    # Clockwise draw 4 edges of an octagon with edge length b 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    turtle.left(180)
    col9e2e16eb = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(col9e2e16eb)
    turtle.left(90)

# Draws letter C in the colour encoded by colorNo with font height h 
# from the current turtle position. 
def letterC(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer triangle at the octagon corner 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    colba7897dc = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(colba7897dc)
    turtle.right(180)
    # Clockwise draws 3 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    turtle.left(rotAngle)
    turtle.penup()
    colba00c7d9 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(2*b + 2*c)
    turtle.pendown()
    turtle.pencolor(colba00c7d9)
    # Counterclockwise draws 4 edges of an octagon with edge length b 
    # iin the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    cole080b2eb = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.pencolor(cole080b2eb)
    turtle.forward(b + 2*c, colorNo)
    turtle.pendown()
    turtle.left(90)

# Draws letter D in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterD(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, false, 2, colorNo)
    turtle.forward(b + 2*c, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, false, 2, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    turtle.left(180)
    col602e0fb6 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(col602e0fb6)
    turtle.left(90)

# Draws letter G in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterG(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon. 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col429b56a3 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col429b56a3)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.left(90)
    turtle.forward(b/2.0 + c, colorNo)
    turtle.penup()
    col33b8a4ba = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b/2.0 + c)
    turtle.right(90)
    turtle.forward(b + c)
    turtle.pendown()
    turtle.pencolor(col33b8a4ba)
    # Counterclockwise draw 4 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    colf0abb375 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.pencolor(colf0abb375)
    turtle.forward(b + 2*c, colorNo)
    turtle.pendown()
    turtle.left(90)

# Draws letter J in colour encoded by colorNo with font height h 
# from the current turtle position. 
def letterJ(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    cola48fe290 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(cola48fe290)
    turtle.right(180)
    # Counterclockwise draw 3 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    turtle.left(rotAngle)
    turtle.forward(h - c, colorNo)
    turtle.penup()
    cold6ed1a8b = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(cold6ed1a8b)

# Draws letter O in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterO(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col488f4240 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col488f4240)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    colc416c3de = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(colc416c3de)
    turtle.left(90)

# Draws letter P in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterP(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    col539ddc42 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b + 2*c)
    turtle.left(90)
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(col539ddc42)
    turtle.left(180)

# Draws letter Q in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterQ(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col1df6b17b = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col1df6b17b)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    col8ed56060 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(b + 2*c)
    turtle.pencolor(col8ed56060)
    turtle.right(rotAngle)
    col19f2f627 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b)
    turtle.pendown()
    turtle.pencolor(col19f2f627)
    turtle.forward(b, colorNo)
    turtle.left(90 + rotAngle)

# Zeichnet den Buchstaben R von der Turtleposition aus 
# mit ZeilenhÃ¶he h 
def letterR(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.left(90 + rotAngle)
    turtle.forward(math.sqrt(2.0)*(b + 2*c), colorNo)
    turtle.left(90 + rotAngle)

# Draws letter S in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterS(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Side length of the (outer) corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    colc4943df6 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(colc4943df6)
    turtle.right(180)
    # Counterclockwise draw 6 edges of an octagon with edge length b 
    # in the colour encoded by colorNo 
    polygonPart(b, 8, true, 6, colorNo)
    # Clockwise draw 5 edges of an octagon with edge length b 
    # in the colour encoded by colorNo 
    polygonPart(b, 8, false, 5, colorNo)
    turtle.right(rotAngle)
    turtle.penup()
    colb5885013 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(2*b + 3*c)
    turtle.pendown()
    turtle.pencolor(colb5885013)
    turtle.left(180)

# Draws letter U in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterU(h, colorNo) :
    # edge length of a regular octagon 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col99619062 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col99619062)
    turtle.forward(h - c, colorNo)
    turtle.penup()
    cola4761bfb = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h-c)
    turtle.pendown()
    turtle.pencolor(cola4761bfb)
    turtle.right(180)
    # Counterclockwise draw 3 edges of an octagoin with edge length b in colour specified by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    turtle.left(rotAngle)
    turtle.forward(h - c, colorNo)
    turtle.penup()
    col4df8df09 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col4df8df09)

# Draws a question mark in colour specified by colorNo with font height h 
# from the current turtle position. 
def qstnMk(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col7ffea66b = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h-c)
    turtle.pendown()
    turtle.pencolor(col7ffea66b)
    # Counterclockwise draw 5 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 5, colorNo)
    turtle.forward(c, colorNo)
    turtle.left(rotAngle)
    turtle.forward(b/2.0, colorNo)
    turtle.penup()
    col24904e89 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(c/2.0)
    turtle.pendown()
    turtle.pencolor(col24904e89)
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, false, 4, colorNo)
    turtle.penup()
    col9cfa156 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.backward(c)
    turtle.pendown()
    turtle.pencolor(col9cfa156)

# Draws digit 0 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit0(h, colorNo) :
    turtle.penup()
    colf527a8f9 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/4.0)
    turtle.pendown()
    turtle.pencolor(colf527a8f9)
    turtle.right(45)
    len = h/math.sqrt(2)
    turtle.forward(len, colorNo)
    turtle.penup()
    col914db332 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(len)
    turtle.left(45)
    turtle.backward(h/4.0)
    turtle.pencolor(col914db332)
    letterO(h, colorNo)

# Draws letter Ã in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterOe(h, colorNo) :
    turtle.penup()
    colff769aa3 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(colff769aa3)
    turtle.right(90)
    # Clockwise draw all 4 edges of a square with edge length h/8 
    # in the colour endcoded by colorNo 
    polygonPart(h/8, 4, false, 4, colorNo)
    turtle.penup()
    colfb6a0faa = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2)
    turtle.pendown()
    turtle.pencolor(colfb6a0faa)
    turtle.right(90)
    # Clockwise draw all 4 edges of a square with edge length h/8 
    # in the colour endcoded by colorNo 
    polygonPart(h/8, 4, false, 4, colorNo)
    turtle.penup()
    colab48a35c = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(colab48a35c)
    turtle.right(90)
    turtle.penup()
    colac8abfe7 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2)
    turtle.pendown()
    turtle.pencolor(colac8abfe7)
    turtle.right(90)
    letterO(h, colorNo)

# Draws letter Ã in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterUe(h, colorNo) :
    turtle.penup()
    col7c3891f1 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.right(90)
    turtle.forward(max(h/8,1))
    turtle.pendown()
    turtle.pencolor(col7c3891f1)
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16,1), 4, false, 4, colorNo)
    turtle.penup()
    col83f54b28 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2 - 2 * max(h/8,1) - max(h/16, 1))
    turtle.pendown()
    turtle.pencolor(col83f54b28)
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16,1), 4, false, 4, colorNo)
    turtle.penup()
    cola84e65b4 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(max(h/8,1))
    turtle.pendown()
    turtle.pencolor(cola84e65b4)
    turtle.right(90)
    turtle.penup()
    cold1e91bea = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.right(90)
    turtle.forward(h/2)
    turtle.pendown()
    turtle.pencolor(cold1e91bea)
    turtle.right(90)
    letterU(h, colorNo)

# Has the turtle draw the given string 'textÂ´ with font height 'hÂ´ (in 
# pixels) and the colour coded by integer 'cÂ´ from the current Turtle 
# position to the Turtle canvas. If the turtle looks North then 
# the text will be written rightwards. In the event, the turtle will be 
# placed behind the text in original orientation (such that the next text 
# would be written like a continuation. Colour codes: 
# 1 = black 
# 2 = red 
# 3 = yellow 
# 4 = green 
# 5 = cyan 
# 6 = blue 
# 7 = pink 
# 8 = grey 
# 9 = orange 
# 10 = violet 
# All letters (ASCII) will be converted to uppercase, 
# the set of representable special characters is: decimal digits, 
# '.', ',', '!', '?', 'Ã', 'Ã', 'Ã'. Other characters will be shown as a small 
# centred square (dummy character). 
def drawText(text, h, c) :
    gap = h/10.0
    for k in range(1, length(text)+1, 1):
        letter = uppercase(copy(text, k, 1))
        if ((letter) == "A") :
            letterA(h,c)
        elif ((letter) == "B") :
            letterB(h,c)
        elif ((letter) == "C") :
            letterC(h,c)
        elif ((letter) == "D") :
            letterD(h,c)
        elif ((letter) == "E") :
            letterE(h,c)
        elif ((letter) == "F") :
            letterF(h,c)
        elif ((letter) == "G") :
            letterG(h,c)
        elif ((letter) == "H") :
            letterH(h,c)
        elif ((letter) == "I") :
            letterI(h,c)
        elif ((letter) == "J") :
            letterJ(h,c)
        elif ((letter) == "K") :
            letterK(h,c)
        elif ((letter) == "L") :
            letterL(h,c)
        elif ((letter) == "M") :
            letterM(h,c)
        elif ((letter) == "N") :
            letterN(h,c)
        elif ((letter) == "O") :
            letterO(h,c)
        elif ((letter) == "P") :
            letterP(h,c)
        elif ((letter) == "Q") :
            letterQ(h,c)
        elif ((letter) == "R") :
            letterR(h,c)
        elif ((letter) == "S") :
            letterS(h,c)
        elif ((letter) == "T") :
            letterT(h,c)
        elif ((letter) == "U") :
            letterU(h,c)
        elif ((letter) == "V") :
            letterV(h,c)
        elif ((letter) == "W") :
            letterW(h,c)
        elif ((letter) == "X") :
            letterX(h,c)
        elif ((letter) == "Y") :
            letterY(h,c)
        elif ((letter) == "Z") :
            letterZ(h,c)
        elif ((letter) == " ") :
            blank(h,c)
        elif ((letter) == "!") :
            exclMk(h,c)
        elif ((letter) == "?") :
            qstnMk(h,c)
        elif ((letter) == ".") :
            fullSt(h,c)
        elif ((letter) == ",") :
            comma(h,c)
        elif ((letter) == "Ã") :
            letterAe(h,c)
        elif ((letter) == "Ã") :
            letterOe(h,c)
        elif ((letter) == "Ã") :
            letterUe(h,c)
        elif ((letter) == "0") :
            digit0(h,c)
        elif ((letter) == "1") :
            digit1(h,c)
        elif ((letter) == "2") :
            digit2(h,c)
        elif ((letter) == "3") :
            digit3(h,c)
        elif ((letter) == "4") :
            digit4(h,c)
        elif ((letter) == "5") :
            digit5(h,c)
        elif ((letter) == "6") :
            digit6(h,c)
        elif ((letter) == "7") :
            digit7(h,c)
        elif ((letter) == "8") :
            digit8(h,c)
        elif ((letter) == "9") :
            digit9(h,c)
        else:
            charDummy(h,c)

        turtle.right(90)
        turtle.penup()
        col4261a79c = turtle.pencolor(); turtle.pencolor("#000000")
        turtle.forward(gap)
        turtle.pendown()
        turtle.left(90)
        turtle.pencolor(col4261a79c)

# = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

# Demo program for routine drawText() 
# Asks the user to enter a text, a wanted text height and colour, 
# and then draws this string onto the turtle screen. Places every 
# entered text to a new line. 
print("This is a demo program for text writing with Turleizer.", sep='')
turtle.showturtle()
turtle.pendown()
y = 0
while True:
    text = input("Enter some text (empty string to exit)")
    # Make sure the content is interpreted as string 
    text = "" + text
    if (text != ""):
        while True:
            height = input("Height of the text (pixels)")
            if height >= 5:
                break

        while True:
            colour = input("Colour (1=black, 2=red, 3=yellow, 4=green, 5=cyan, 6=blue, 7=pink, 8=gray, 9=orange, 10=violet)")
            if colour >= 1  and  colour <= 10:
                break

        y = y + height + 2
        turtle.goto(0, y - 2)
        drawText(text, height, colour)

    if text == "":
        break

turtle.goto(0, y + 15)
drawText("Thank you, bye.", 10, 4)
turtle.hideturtle()

# turtle.bye()	# TODO: re-enable this if you want to close the turtle window. 
